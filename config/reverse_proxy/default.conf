# define a logical upstream pool
upstream cph_frontend {
    server cph_frontend_nextjs:3000;
    # mark the secondary as backup â€” only used when the primary is down
    server cph_frontend_nextgen:3000 backup;
}

server {
    listen 80;
    listen [::]:80;
    server_name localhost;

    # this will try cph_frontend_nextjs first,
    # then cph_frontend_nextgen if the primary fails
    location / {
        proxy_pass http://cph_frontend;
        # which errors/times out count as failure
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        # keep headers, timeouts, etc.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /api/ {
        proxy_pass http://apisix:9080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
