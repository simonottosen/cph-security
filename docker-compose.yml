services:
  cph_postgres_db:
    image: postgres:17
    container_name: "cph_postgres_db"
    environment: 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - ./cph/db:/var/lib/postgresql/data
      - ./database/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    restart: unless-stopped
    ports:
    - "80:80/tcp"
    
  reverse-proxy:
    image: "nginx:alpine"
    container_name: "reverse-proxy"
    volumes:
      - ./config/reverse_proxy:/etc/nginx/conf.d
    restart: unless-stopped

  cph_postgrest:
    image: postgrest/postgrest
    container_name: "cph_postgrest"
    depends_on:
      - cph_postgres_db
    restart: unless-stopped
    environment: 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PGRST_DB_URI: ${PGRST_DB_URI}
      PGRST_DB_SCHEMAS: public
      PGRST_OPENAPI_SERVER_PROXY_URI: ${POSTGRESTAPIURL}
      PGRST_DB_ANON_ROLE: web_anon

  swagger-ui:
    container_name: cph_swagger-ui
    image: swaggerapi/swagger-ui:latest
    depends_on:
      - cph_postgres_db
    environment:
      API_URL: ${API_URL}
    restart: unless-stopped

  universal_fetchtime:
    image: "ghcr.io/simonottosen/cph-security_fetchtime:main"
    container_name: "universal_fetchtime"
    user: user
    depends_on:
      - cph_postgres_db
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      CPHAPI_HOST: ${CPHAPI_HOST}
      FRA_HEALTHCHECK: ${FRA_HEALTHCHECK}
      ARN_HEALTHCHECK: ${ARN_HEALTHCHECK}
      CPH_HEALTHCHECK: ${CPH_HEALTHCHECK}
      OSL_HEALTHCHECK: ${OSL_HEALTHCHECK}
      DUS_HEALTHCHECK: ${DUS_HEALTHCHECK}
      AMS_HEALTHCHECK: ${AMS_HEALTHCHECK}
      DUB_HEALTHCHECK: ${DUB_HEALTHCHECK}
      LHR_HEALTHCHECK: ${LHR_HEALTHCHECK}
      MUC_HEALTHCHECK: ${MUC_HEALTHCHECK}
      IST_HEALTHCHECK: ${IST_HEALTHCHECK}
      GOOGLE_APPLICATION_CREDENTIALS: /home/user/app/keyfile.json
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      SUPABASE_EMAIL: ${SUPABASE_EMAIL}
      SUPABASE_PASSWORD: ${SUPABASE_PASSWORD}
    restart: unless-stopped
    volumes:
      - ${GCP_KEY_PATH}:/home/user/app/keyfile.json:ro
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.dus.schedule=@every 5m"
      - "ofelia.job-exec.dus.command=dus-fetch"
      - "ofelia.job-exec.fra.schedule=@every 5m"
      - "ofelia.job-exec.fra.command=fra-fetch"
      - "ofelia.job-exec.cph.schedule=@every 5m"
      - "ofelia.job-exec.cph.command=cph-fetch"
      - "ofelia.job-exec.osl.schedule=@every 5m"
      - "ofelia.job-exec.osl.command=osl-fetch"
      - "ofelia.job-exec.arn.schedule=@every 5m"
      - "ofelia.job-exec.arn.command=arn-fetch"
      - "ofelia.job-exec.ams.schedule=@every 5m"
      - "ofelia.job-exec.ams.command=ams-fetch"
      - "ofelia.job-exec.dub.schedule=@every 5m"
      - "ofelia.job-exec.dub.command=dub-fetch"
      - "ofelia.job-exec.lhr.schedule=@every 5m"
      - "ofelia.job-exec.lhr.command=lhr-fetch"
      - "ofelia.job-exec.muc.schedule=@every 5m"
      - "ofelia.job-exec.muc.command=muc-fetch"
      - "ofelia.job-exec.ist.schedule=@every 5m"
      - "ofelia.job-exec.ist.command=ist-fetch"

  ofelia:
    container_name: "ofelia_scheduler"
    image: mcuadros/ofelia:latest
    restart: unless-stopped
    depends_on:
      - universal_fetchtime
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  cph_frontend_nextgen:
    image: "ghcr.io/simonottosen/cph-security_frontend-nextgen:main"
    container_name: "cph_frontend_nextgen"
    restart: unless-stopped
    environment:
      REACT_APP_API_HOST: ${API_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  apisix_dashboard:
    image: apache/apisix-dashboard
    container_name: "apisix_dashboard"
    restart: unless-stopped
    volumes:
    - ./config/apisix_dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    ports:
    - "9000:9000"

  apisix:
    container_name: "apisix"
    image: apache/apisix
    restart: unless-stopped
    volumes:
      - ./config/apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      - etcd
    ports:
      - "9180:9180/tcp"
      - "9080:9080/tcp"
      - "9091:9091/tcp"
      - "9443:9443/tcp"
      - "9092:9092/tcp"

  etcd:
    container_name: "etcd"
    image: bitnami/etcd:3.4.15
    restart: unless-stopped
    volumes:
      - ./config/etcd_data:/bitnami/etcd
    environment:
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    ports:
      - "2379:2379/tcp"

  ml_api:
    image: "ghcr.io/simonottosen/cph-security_ml_api:main"
    container_name: "ml_api"
    ports:
      - "5000:5000"
    depends_on:
      - cph_postgres_db
      - cph_postgrest
    environment:
      CPHAPI_HOST: ${CPHAPI_HOST}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      SUPABASE_EMAIL: ${SUPABASE_EMAIL}
      SUPABASE_PASSWORD: ${SUPABASE_PASSWORD}
    restart: unless-stopped
